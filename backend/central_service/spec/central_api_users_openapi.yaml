openapi: 3.0.1
info:
  title: Central Api Users
  version: 0.1.0
servers:
- url: "{server}:{port}/central/api/users"
  variables:
    server:
      default: http://localhost
    port:
      default: "9094"
paths:
  /:
    get:
      operationId: get
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
    post:
      operationId: post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInsert'
        required: true
      responses:
        "500":
          description: InternalServerError
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        "401":
          description: Unauthorized
  /friends:
    get:
      operationId: getFriends
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
  /friend-request:
    put:
      operationId: putFriendRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
        required: true
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
    delete:
      operationId: deleteFriendRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
        required: true
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
  /accept-friend-request:
    put:
      operationId: putAcceptFriendRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
        required: true
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
  /follow-friend:
    delete:
      operationId: deleteFollowFriend
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
        required: true
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
  /reject-friend-request:
    delete:
      operationId: deleteRejectFriendRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
        required: true
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
  /friend-follower:
    delete:
      operationId: deleteFriendFollower
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
        required: true
      responses:
        "500":
          description: InternalServerError
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        "401":
          description: Unauthorized
        "404":
          description: NotFound
components:
  schemas:
    Friends:
      type: object
      properties:
        followers:
          type: array
          items:
            $ref: '#/components/schemas/UserDetails'
          default: []
        following:
          type: array
          items:
            $ref: '#/components/schemas/UserDetails'
          default: []
        requested:
          type: array
          items:
            $ref: '#/components/schemas/UserDetails'
          default: []
        requestedBy:
          type: array
          items:
            $ref: '#/components/schemas/UserDetails'
          default: []
      additionalProperties: false
    ID:
      required:
      - id
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    Lesson:
      required:
      - id
      - name
      - "no"
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        "no":
          type: integer
          format: int64
      additionalProperties: false
    Subject:
      required:
      - id
      - lessons
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/Lesson'
      additionalProperties: false
    SubjectGoal:
      type: object
      allOf:
      - $ref: '#/components/schemas/Subject'
      - type: object
        properties:
          goalHours:
            type: number
            format: double
            default: 0
          actualHours:
            type: number
            format: double
            default: 0
        additionalProperties: false
    UserDetails:
      required:
      - email
      - id
      - name
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        subjects:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/Subject'
          - type: array
            items:
              $ref: '#/components/schemas/SubjectGoal'
      additionalProperties: false
    UserInsert:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
